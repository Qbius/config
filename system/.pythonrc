import os
import sys

HOME = os.path.normpath(os.environ['HOME'])
PYTHONRC_CACHE = os.path.join(HOME, '.pythonrc_cache')
PYTHONRC_STATES = os.path.join(PYTHONRC_CACHE, 'states')
PYTHONRC_SESSIONS = os.path.join(PYTHONRC_CACHE, 'sessions')

if not os.path.exists(PYTHONRC_CACHE): os.mkdir(PYTHONRC_CACHE)
if not os.path.exists(PYTHONRC_STATES): os.mkdir(PYTHONRC_STATES)
if not os.path.exists(PYTHONRC_SESSIONS): os.mkdir(PYTHONRC_SESSIONS)

def save_state(what, pcid, path = PYTHONRC_STATES):
    with open(os.path.join(path, f'{pcid}.state'), 'wb') as where:
        from dill import dump
        dump(what, where, recurse = True)

def load_state(pcid, path = PYTHONRC_STATES):
    with open(os.path.join(path, f'{pcid}.state'), 'rb') as where:
        from dill import load
        return load(where)

if not os.path.exists(os.path.join(PYTHONRC_CACHE, 'vars.state')): save_state(dict(), 'vars', PYTHONRC_CACHE)

def get_persistent():
    return load_state('vars', PYTHONRC_CACHE)

def save_session(sessid, path = PYTHONRC_SESSIONS):
    from dill import dump_session
    dump_session(os.path.join(path, f'{sessid}.session'))
    
def load_session(sessid, path = PYTHONRC_SESSIONS):
    from dill import load_session
    load_session(os.path.join(path, f'{sessid}.session'))

def pause():
    save_session('saved', PYTHONRC_CACHE)
    exit()

def persist(*args, name = None):
    onearg = len(args) == 1
    if (not onearg and name == None) or (len(args) > 0 and name):
        raise TypeError(f"persist() takes 1 argument but {len(args) + int(bool(name))} were given")
        
    global built_ins
    current_state = get_persistent()

    names = [k for k, v in globals().items() if v is args[0]] if onearg else []
    name = names[0] if len(names) == 1 else name if name in globals().keys() else None
  
    if len(names) > 1:
        print(f"More than one variable has that value: {', '.join(vars.keys())}.")
        print(f"Consider stating the variable's name explicitly, like so: persist(name = '{list(vars.keys())[0]}').")
    elif not name:
        print("No variables matching the given criteria")
    elif name in built_ins:
        print(f"{name} is either a built-in function or a .pythonrc-provided function.")
        print("If you -really- need to do this, modify the 'built_ins' variable and then call this function again")
    else:
        save_state({**current_state, name: globals()[name]}, 'vars', PYTHONRC_CACHE)

def forget(*args, name = None):
    onearg = len(args) == 1
    if (not onearg and name == None) or (len(args) > 0 and name):
        raise TypeError(f"persist() takes 1 argument but {len(args) + int(bool(name))} were given")
        
    global built_ins
    current_state = get_persistent()

    names = [k for k, v in current_state.items() if v is args[0]] if onearg else []
    name = names[0] if len(names) == 1 else name if name in current_state.keys() else None
  
    if len(names) > 1:
        print(f"More than one variable has that value: {', '.join(vars.keys())}.")
        print(f"Consider stating the variable's name explicitly, like so: persist(name = '{list(vars.keys())[0]}').")
    elif not name:
        print("No variables matching the given criteria")
    elif name in built_ins:
        print(f"{name} is either a built-in function or a .pythonrc-provided function.")
        print("If you -really- need to do this, modify the 'built_ins' variable and then call this function again")
    else:
        current_state.pop(name, None)
        save_state(current_state, 'vars', PYTHONRC_CACHE)

# please leave this at the bottom
###################################################################
built_ins = list(globals().keys())                                #
for name, value in get_persistent().items():                      #
    globals()[name] = value                                       #
                                                                  #
if os.path.exists(os.path.join(PYTHONRC_CACHE, 'saved.session')): #
    load_session('saved', PYTHONRC_CACHE)                         #
    os.remove(os.path.join(PYTHONRC_CACHE, 'saved.session'))      #
###################################################################
# thanks